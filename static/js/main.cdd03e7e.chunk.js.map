{"version":3,"sources":["components/PokemonData.jsx","components/Pokedex.jsx","App.js","serviceWorker.js","index.js"],"names":["PokemonData","pokemon","name","species","abilities","pokemonNumber","id","stats","types","height","weight","sprite","sprites","front_default","src","map","type","ability","stat","base_stat","Pokedex","props","useState","search","setSearch","error","setError","setPokemon","styles","pokedexContainer","display","justifyContent","leftContainer","flexDirection","borderRadius","padding","backgroundColor","border","margin","width","rightContainer","header","textAlign","buttonSpacing","marginTop","color","style","className","placeholder","onChange","event","target","value","onClick","axios","get","toLowerCase","then","res","data","console","log","catch","err","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kPAiDeA,G,MA9CK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACfC,EAAOD,EAAQE,QAAQD,KACvBE,EAAYH,EAAQG,UACpBC,EAAgBJ,EAAQK,GACxBC,EAAQN,EAAQM,MAChBC,EAAQP,EAAQO,MAChBC,EAASR,EAAQQ,OACjBC,EAAST,EAAQS,OACjBC,EAASV,EAAQW,QAAQC,cAC/B,OACE,6BACE,yBAAKC,IAAKH,IACV,4BACGT,EADH,OACaG,EADb,KAGA,6BACA,sCACA,2BAAII,GACJ,sCACA,2BAAIC,GACJ,qCACA,4BACGF,EAAMO,KAAI,SAACC,GACV,OAAO,4BAAKA,EAAKA,KAAKd,UAG1B,yCACA,4BACGE,EAAUW,KAAI,SAACE,GACd,OAAO,4BAAKA,EAAQA,QAAQf,UAGhC,0CACA,4BACGK,EAAMQ,KAAI,SAACG,GACV,OACE,4BACGA,EAAKA,KAAKhB,KADb,KACqBgB,EAAKC,kBCwDvBC,EA3FC,SAACC,GAAW,IAAD,EACGC,mBAAS,IADZ,mBAClBC,EADkB,KACVC,EADU,OAGCF,mBAAS,IAHV,mBAGlBG,EAHkB,KAGXC,EAHW,OAKKJ,mBAAS,MALd,mBAKlBrB,EALkB,KAKT0B,EALS,KAOnBC,EAAS,CACbC,iBAAkB,CAChBC,QAAS,OACTC,eAAgB,gBAElBC,cAAe,CACbF,QAAS,OACTG,cAAe,SACfC,aAAc,EACdC,QAAS,GACTC,gBAAiB,UACjBC,OAAQ,oBACRC,OAAQ,GACR7B,OAAQ,IACR8B,MAAO,OAETC,eAAgB,CACdV,QAAS,OACTG,cAAe,SACfC,aAAc,EACdC,QAAS,GACTC,gBAAiB,UACjBC,OAAQ,oBACRC,OAAQ,GACRC,MAAO,OAETE,OAAQ,CACNC,UAAW,UAEbC,cAAe,CACbC,UAAW,IAEbnB,MAAO,CACLoB,MAAO,MACPP,OAAQ,KAuBZ,OACE,yBAAKQ,MAAOlB,EAAOC,kBACjB,yBAAKiB,MAAOlB,EAAOI,eACjB,wBAAIc,MAAOlB,EAAOa,QAAlB,WACA,2BACEM,UAAU,+BACVC,YAAY,kBACZC,SA1Ba,SAACC,GACpB1B,EAAU0B,EAAMC,OAAOC,UA2BnB,4BACEL,UAAU,kBACVD,MAAOlB,EAAOe,cACdU,QA3Bc,WACpBC,IACGC,IAAI,qCAAuChC,EAAOiC,eAClDC,MAAK,SAACC,GACLhC,EAAS,IACT,IAAMiC,EAAOD,EAAIC,KACjBC,QAAQC,IAAIF,GACZhC,EAAWgC,MAEZG,OAAM,SAACC,GACNH,QAAQC,IAAIE,GACZrC,EAAS,mBAaT,UAOCD,GAAS,uBAAGqB,MAAOlB,EAAOH,OAAQA,IAEpCxB,GACC,yBAAK6C,MAAOlB,EAAOY,gBACjB,kBAAC,EAAD,CAAavC,QAASA,OCxEjB+D,MAdf,WAOE,OACE,yBAAKjB,UAAU,MAAMD,MANV,CACTV,gBAAiB,UACjB3B,OAAQ,UAKR,kBAAC,EAAD,QCAcwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdjB,OAAM,SAAArC,GACLmC,QAAQnC,MAAMA,EAAMuD,c","file":"static/js/main.cdd03e7e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst PokemonData = ({ pokemon }) => {\n  const name = pokemon.species.name; //str\n  const abilities = pokemon.abilities; // [{name: \"lightning-rod\"}]\n  const pokemonNumber = pokemon.id; // int\n  const stats = pokemon.stats; // {base_stat: 90, stat{name:\"speed\"}}\n  const types = pokemon.types; // [{name: \"electric\"}]\n  const height = pokemon.height; // int\n  const weight = pokemon.weight; // int\n  const sprite = pokemon.sprites.front_default; // str\n  return (\n    <div>\n      <img src={sprite} />\n      <h2>\n        {name} # ({pokemonNumber})\n      </h2>\n      <hr />\n      <h3>Height</h3>\n      <p>{height}</p>\n      <h3>Weight</h3>\n      <p>{weight}</p>\n      <h3>Types</h3>\n      <ul>\n        {types.map((type) => {\n          return <li>{type.type.name}</li>;\n        })}\n      </ul>\n      <h3>Abilities</h3>\n      <ul>\n        {abilities.map((ability) => {\n          return <li>{ability.ability.name}</li>;\n        })}\n      </ul>\n      <h3>Base Stats</h3>\n      <ul>\n        {stats.map((stat) => {\n          return (\n            <li>\n              {stat.stat.name}: {stat.base_stat}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default PokemonData;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport PokemonData from \"./PokemonData\";\n\nconst Pokedex = (props) => {\n  const [search, setSearch] = useState(\"\");\n\n  const [error, setError] = useState(\"\");\n\n  const [pokemon, setPokemon] = useState(null);\n\n  const styles = {\n    pokedexContainer: {\n      display: \"flex\",\n      justifyContent: \"space-evenly\",\n    },\n    leftContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      borderRadius: 5,\n      padding: 10,\n      backgroundColor: \"#D4D4D4\",\n      border: \"1px solid #A4A4A4\",\n      margin: 20,\n      height: 225,\n      width: \"40%\",\n    },\n    rightContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      borderRadius: 5,\n      padding: 20,\n      backgroundColor: \"#D4D4D4\",\n      border: \"1px solid #A4A4A4\",\n      margin: 20,\n      width: \"40%\",\n    },\n    header: {\n      textAlign: \"center\",\n    },\n    buttonSpacing: {\n      marginTop: 10,\n    },\n    error: {\n      color: \"red\",\n      margin: 10,\n    },\n  };\n\n  const handleSearch = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const searchPokemon = () => {\n    axios\n      .get(\"https://pokeapi.co/api/v2/pokemon/\" + search.toLowerCase())\n      .then((res) => {\n        setError(\"\");\n        const data = res.data;\n        console.log(data);\n        setPokemon(data);\n      })\n      .catch((err) => {\n        console.log(err);\n        setError(\"No Results\");\n      });\n  };\n\n  return (\n    <div style={styles.pokedexContainer}>\n      <div style={styles.leftContainer}>\n        <h1 style={styles.header}>Pokedex</h1>\n        <input\n          className=\"form-control form-control-lg\"\n          placeholder=\"Enter a Pokemon\"\n          onChange={handleSearch}\n        ></input>\n        <button\n          className=\"btn btn-primary\"\n          style={styles.buttonSpacing}\n          onClick={searchPokemon}\n        >\n          Search\n        </button>\n        {error && <p style={styles.error}>{error}</p>}\n      </div>\n      {pokemon && (\n        <div style={styles.rightContainer}>\n          <PokemonData pokemon={pokemon} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Pokedex;\n","import React from \"react\";\nimport Pokedex from \"./components/Pokedex\";\n\nfunction App() {\n  const styles = {\n    container: {\n      backgroundColor: \"#D60A2D\",\n      height: \"100vh\"\n    }\n  };\n  return (\n    <div className=\"App\" style={styles.container} >\n      <Pokedex />\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}